from flask import Flask, render_template, request, redirect, url_for, jsonify, session, flash
import sqlite3
from ldap3 import Server, Connection, ALL, SIMPLE, SUBTREE
from ldap3.core.exceptions import LDAPBindError
import json
import os
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = os.urandom(24)  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Å—Å–∏–π

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('kanban.db', check_same_thread=False, timeout=10)
    conn.row_factory = sqlite3.Row
    return conn


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ LDAP
def get_ldap_config():
    conn = get_db_connection()
    config = conn.execute("SELECT * FROM ldap_settings WHERE id = 1").fetchone()
    conn.close()

    if not config:
        print("‚ö† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î!")
        return None

    ldap_config = {
        "server": config["server"],
        "port": config["port"],
        "bind_user": config["bind_user"],
        "bind_password": config["bind_password"],
        "base_dn": config["base_dn"],
        "user_attr": config["user_attr"]
    }

    # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON-—Ñ–∞–π–ª
    with open("ldap_config.json", "w", encoding="utf-8") as f:
        json.dump(ldap_config, f, indent=4)

    return ldap_config
#–ó–∞–≥—Ä—É–∑–∫–∞ LDAP
def load_ldap_config():
    try:
        with open("ldap_config.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return None
def ldap_authenticate(username, password):
    try:
        ldap_settings = get_ldap_config()
        if not ldap_settings:
            print("–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return False

        server = Server(ldap_settings['server'], port=ldap_settings['port'], get_info=ALL)
        conn = Connection(
            server,
            user=ldap_settings['bind_user'],
            password=ldap_settings['bind_password'],
            auto_bind=True
        )
        search_filter = f"({ldap_settings['user_attr']}={username})"
        conn.search(ldap_settings['base_dn'], search_filter, search_scope=SUBTREE, attributes=['cn', 'givenName', 'sn'])

        if not conn.entries:
            return False

        user_dn = conn.entries[0].entry_dn
        user_conn = Connection(server, user=user_dn, password=password, authentication=SIMPLE)

        if user_conn.bind():
            first_name = conn.entries[0]['givenName'].value if 'givenName' in conn.entries[0] else None
            last_name = conn.entries[0]['sn'].value if 'sn' in conn.entries[0] else None
            middle_name = None
            if 'cn' in conn.entries[0]:
                full_name = conn.entries[0]['cn'].value
                full_name_parts = full_name.split()
                if len(full_name_parts) > 2:
                    middle_name = " ".join(full_name_parts[1:-1])
                first_name = first_name or full_name_parts[0]
                last_name = last_name or full_name_parts[-1]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            conn_db = get_db_connection()
            user_in_db = conn_db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()

            if not user_in_db:
                conn_db.execute(
                    'INSERT INTO users (username, first_name, last_name, middle_name, is_admin) VALUES (?, ?, ?, ?, ?)',
                    (username, first_name, last_name, middle_name, 0)
                )
                conn_db.commit()
                user_in_db = conn_db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–µ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è —á–∏—Å–ª–æ–≤–æ–π user_id
            session['is_ldap_user'] = True
            session['user_id'] = user_in_db['id']
            session['is_admin'] = 0
            session['first_name'] = first_name
            session['last_name'] = last_name
            session['middle_name'] = middle_name

            conn_db.close()
            return True
        else:
            return False
    except LDAPBindError:
        return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def init_db():
    conn = get_db_connection()
    with open('schema.sql') as f:
        conn.executescript(f.read())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('admin',)).fetchone()

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø–∞—Ä–æ–ª–µ–º "admin"
    if not admin_user:
        hashed_password = generate_password_hash('admin', method='pbkdf2:sha256', salt_length=16)
        conn.execute('INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)',
                     ('admin', hashed_password, True))
        conn.commit()

    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    return session.get('is_admin', False)



# –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@app.route('/admin')
def admin_panel():
    if 'is_admin' not in session or not session['is_admin']:
        return redirect(url_for('index'))

    conn = get_db_connection()
    users = conn.execute('SELECT id, username, is_admin FROM users').fetchall()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP –∏–∑ –±–∞–∑—ã (–ø—Ä–∏–º–µ—Ä)
    ldap_config = conn.execute('SELECT * FROM ldap_settings LIMIT 1').fetchone()

    conn.close()

    return render_template('admin_panel.html', users=users, ldap_config=ldap_config)
#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LDAP
@app.route('/admin/save_ldap_settings', methods=['POST'])
def save_ldap_settings():
    data = request.json  # –ü–æ–ª—É—á–∞–µ–º JSON
    print("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –õ–æ–≥–∏—Ä—É–µ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    required_keys = ['ldap_server', 'ldap_port', 'ldap_bind_user', 'ldap_bind_password', 'ldap_base_dn', 'ldap_user_attr']
    if not all(key in data for key in required_keys):
        return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"}), 400

    try:
        conn = get_db_connection()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP
        existing = conn.execute("SELECT id FROM ldap_settings WHERE id = 1").fetchone()

        if existing:
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP –≤ –ë–î")
            conn.execute("""
                UPDATE ldap_settings
                SET server = ?, port = ?, bind_user = ?, bind_password = ?, base_dn = ?, user_attr = ?
                WHERE id = 1
            """, (data['ldap_server'], data['ldap_port'], data['ldap_bind_user'],
                  data['ldap_bind_password'], data['ldap_base_dn'], data['ldap_user_attr']))
        else:
            print("üÜï –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ LDAP")
            conn.execute("""
                INSERT INTO ldap_settings (id, server, port, bind_user, bind_password, base_dn, user_attr)
                VALUES (1, ?, ?, ?, ?, ?, ?)
            """, (data['ldap_server'], data['ldap_port'], data['ldap_bind_user'],
                  data['ldap_bind_password'], data['ldap_base_dn'], data['ldap_user_attr']))

        conn.commit()
        conn.close()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON-—Ñ–∞–π–ª (–∫–µ—à–∏—Ä—É–µ–º)
        with open("ldap_config.json", "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4)

        return jsonify({"message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}), 200

    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è LDAP: {str(e)}"}), 500
#–ü—Ä–æ–≤–µ—Ä–∫–∞ ldap —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
@app.route('/admin/test_ldap_connection', methods=['POST'])
def test_ldap_connection():
    ldap_settings = get_ldap_config()

    if not ldap_settings:
        return jsonify({"error": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LDAP –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}), 400

    try:
        server = Server(ldap_settings['server'], port=int(ldap_settings['port']), get_info=ALL)
        conn = Connection(
            server,
            user=ldap_settings['bind_user'],
            password=ldap_settings['bind_password'],
            auto_bind=True
        )

        if conn.bind():
            return jsonify({"message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LDAP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"}), 200
        else:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É LDAP"}), 400

    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ LDAP: {str(e)}"}), 500

# –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/admin/create_user_async', methods=['POST'])
def create_user_async():
    if not is_admin():
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.'}), 403

    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    is_admin_flag = 1 if data.get('is_admin') else 0

    hashed_password = generate_password_hash(password, method='pbkdf2:sha256', salt_length=16)

    conn = get_db_connection()
    try:
        conn.execute("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)",
                     (username, hashed_password, is_admin_flag))
        conn.commit()
        return jsonify({'success': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.'}), 200
    except sqlite3.IntegrityError:
        return jsonify({'error': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'}), 400
    finally:
        conn.close()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
#–°–º–µ–Ω–∞ —Ä–æ–ª–∏
@app.route('/admin/change_user_role/<int:user_id>', methods=['POST'])
def change_user_role(user_id):
    if not is_admin():
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return redirect(url_for('admin_panel'))

    new_role = int(request.form['is_admin'])

    conn = get_db_connection()
    conn.execute('UPDATE users SET is_admin = ? WHERE id = ?', (new_role, user_id))
    conn.commit()
    conn.close()

    flash("–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    return redirect(url_for('admin_panel'))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/admin/change_password_async/<int:user_id>', methods=['POST'])
def change_password_async(user_id):
    if not is_admin():
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.'}), 403

    data = request.get_json()
    new_password = data.get('password')

    if not new_password:
        return jsonify({'error': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.'}), 400

    hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256', salt_length=16)

    conn = get_db_connection()
    conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user_id))
    conn.commit()
    conn.close()

    return jsonify({'success': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.'})

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/admin/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if not is_admin():
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return redirect(url_for('index'))

    conn = get_db_connection()
    conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
    conn.commit()
    conn.close()
    flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    return redirect(url_for('admin_panel'))


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.')
            return redirect(url_for('register'))

        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        hashed_password = generate_password_hash(password, method='pbkdf2:sha256', salt_length=16)
        conn = get_db_connection()
        try:
            conn.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
            conn.commit()
            flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.")
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        finally:
            conn.close()

    return render_template('register.html')

# –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        auth_type = request.form.get('auth_type')
        username = request.form['username']
        password = request.form['password']

        if auth_type == 'ldap' and ldap_authenticate(username, password):
            session['username'] = username
            session['user_type'] = 'ldap'
            session['user_id'] = username  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session['is_admin'] = 0  # LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
            return redirect(url_for('index'))
        elif auth_type == 'local':
            conn = get_db_connection()
            user = conn.execute("SELECT * FROM users WHERE username = ?", (username,)).fetchone()
            conn.close()
            if user and check_password_hash(user['password'], password):
                session['username'] = username
                session['user_type'] = 'local'
                session['user_id'] = user['id']
                session['is_admin'] = user['is_admin']
                return redirect(url_for('index'))
        flash("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    return render_template('login.html')

#–í—ã—Ö–æ–¥
@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/get_project_data/<int:project_id>', methods=['GET'])
def get_project_data(project_id):
    conn = get_db_connection()
    project = conn.execute('SELECT * FROM projects WHERE id = ?', (project_id,)).fetchone()
    conn.close()

    if project:
        return jsonify({
            'id': project['id'],
            'name': project['name'],
            'tasks': []  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        })
    else:
        return jsonify({'error': '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

#–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ index
@app.route('/')
def index():
    if 'username' not in session:
        return redirect(url_for('login'))

    conn = get_db_connection()
    user_id = session['user_id']

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    projects = conn.execute('''
        SELECT * FROM projects
        WHERE owner_id = ?
        OR id IN (SELECT project_id FROM project_users WHERE user_id = ?)
    ''', (user_id, user_id)).fetchall()

    # –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    tasks = conn.execute('''
        SELECT DISTINCT tasks.id, tasks.task_number, tasks.title, tasks.status, tasks.description,
                        tasks.due_date, tasks.project_id, tasks.parent_id,
                        u.first_name || ' ' || u.last_name AS assignee_name
        FROM tasks
        LEFT JOIN users u ON tasks.assignee_id = u.id
        WHERE tasks.project_id IN (
            SELECT id FROM projects WHERE owner_id = ?
            OR id IN (SELECT project_id FROM project_users WHERE user_id = ?)
        )
    ''', (user_id, user_id)).fetchall()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ Python
    unique_tasks = {}
    for task in tasks:
        if task['id'] not in unique_tasks:
            unique_tasks[task['id']] = task

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    ldap_users = conn.execute('SELECT id, username, first_name, last_name FROM users WHERE password IS NULL').fetchall()
    local_users = conn.execute('SELECT id, username FROM users WHERE password IS NOT NULL').fetchall()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    project_users = {}
    for project in projects:
        users = conn.execute('''
            SELECT u.id, u.username, u.first_name, u.last_name, u.is_admin, pu.role
            FROM users u
            JOIN project_users pu ON u.id = pu.user_id
            WHERE pu.project_id = ?
        ''', (project['id'],)).fetchall()

        project_users[project['id']] = [
            {
                'id': user['id'],
                'username': user['username'],
                'display_name': f"{user['first_name']} {user['last_name']}" if user['first_name'] and user['last_name'] else user['username'],
                'role': user['role']
            }
            for user in users
        ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    tasks_by_project = {}
    for task in unique_tasks.values():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        project_id = task['project_id']
        status = task['status']
        if project_id not in tasks_by_project:
            tasks_by_project[project_id] = {'To Do': [], 'In Progress': [], 'Done': []}
        tasks_by_project[project_id][status].append(task)

    conn.close()

    return render_template(
        'index.html',
        projects=projects,
        tasks_by_project=tasks_by_project,
        project_users=project_users,
        ldap_users=ldap_users,
        local_users=local_users
    )
#–í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
@app.route('/contacts')
def contacts():
    conn = get_db_connection()
    user_id = session['user_id']

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    local_contacts = conn.execute('''
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.phone, u.notes
        FROM users u
        JOIN contacts c ON u.id = c.contact_id
        WHERE c.user_id = ?
    ''', (user_id,)).fetchall()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏
    all_users = conn.execute('''
        SELECT id, username, first_name, last_name, email, phone, notes FROM users
    ''').fetchall()

    conn.close()

    return render_template('contacts.html', local_contacts=local_contacts, all_users=all_users)
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@app.route('/add_contact', methods=['POST'])
def add_contact():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    contact_id = request.form['contact_id']
    user_id = session['user_id']

    conn = get_db_connection()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    existing = conn.execute(
        'SELECT * FROM contacts WHERE user_id = ? AND contact_id = ?', (user_id, contact_id)
    ).fetchone()

    if not existing:
        conn.execute('INSERT INTO contacts (user_id, contact_id) VALUES (?, ?)', (user_id, contact_id))
        conn.commit()

    conn.close()
    return redirect(url_for('contacts'))
#–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@app.route('/delete_contact', methods=['POST'])
def delete_contact():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 403

    data = request.get_json()
    contact_id = data.get('contact_id')

    if not contact_id:
        return jsonify({'error': 'Missing contact_id'}), 400

    conn = get_db_connection()
    conn.execute('DELETE FROM contacts WHERE user_id = ? AND contact_id = ?', (session['user_id'], contact_id))
    conn.commit()
    conn.close()

    return jsonify({'success': True})
#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@app.route('/update_contact', methods=['POST'])
def update_contact():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 403

    user_id = session['user_id']
    contact_id = request.form.get('contact_id')

    if not contact_id:
        return jsonify({"error": "Missing contact_id"}), 400

    new_email = request.form.get('email')
    new_phone = request.form.get('phone')
    new_first_name = request.form.get('first_name')
    new_last_name = request.form.get('last_name')

    conn = get_db_connection()
    contact = conn.execute("SELECT * FROM users WHERE id = ?", (contact_id,)).fetchone()

    if not contact:
        conn.close()
        return jsonify({"error": "Contact not found"}), 404

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, LDAP –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if contact['is_ldap_user']:
        # LDAP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        if int(contact_id) != user_id:
            conn.close()
            return jsonify({"error": "You can only edit your own LDAP details"}), 403

        conn.execute("UPDATE users SET email = ?, phone = ? WHERE id = ?", (new_email, new_phone, contact_id))
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        conn.execute("UPDATE users SET first_name = ?, last_name = ?, email = ?, phone = ? WHERE id = ?",
                     (new_first_name, new_last_name, new_email, new_phone, contact_id))

    conn.commit()
    conn.close()
    return jsonify({"success": "Contact updated successfully"})
#–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/profile')
def profile():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db_connection()
    user_id = session['user_id']

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = conn.execute('SELECT id, first_name, last_name, email, phone, notes, is_ldap_user FROM users WHERE id = ?', (user_id,)).fetchone()
    conn.close()

    if user is None:
        return redirect(url_for('index'))

    return render_template('profile.html', user=user)
#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@app.route('/update_profile', methods=['POST'])
def update_profile():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db_connection()
    user_id = session['user_id']

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = conn.execute('SELECT is_ldap_user FROM users WHERE id = ?', (user_id,)).fetchone()

    if user is None:
        conn.close()
        return redirect(url_for('profile'))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    email = request.form['email']
    phone = request.form['phone']
    notes = request.form['notes']

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–æ–∫–∞–ª—å–Ω—ã–π, –ø–æ–∑–≤–æ–ª—è–µ–º –∏–∑–º–µ–Ω—è—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    if not user['is_ldap_user']:
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        conn.execute('''
            UPDATE users SET first_name = ?, last_name = ?, email = ?, phone = ?, notes = ? WHERE id = ?
        ''', (first_name, last_name, email, phone, notes, user_id))
    else:
        # LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–º–µ—Ç–∫–∏
        conn.execute('''
            UPDATE users SET email = ?, phone = ?, notes = ? WHERE id = ?
        ''', (email, phone, notes, user_id))

    conn.commit()
    conn.close()

    return redirect(url_for('profile'))
#–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
@app.route('/invite_to_project/<int:project_id>', methods=['POST'])
def invite_to_project(project_id):
    if 'username' not in session:
        return redirect(url_for('login'))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    invited_username = request.form.get('username')  # –î–ª—è LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    invited_user_id = request.form.get('user_id')  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    conn = get_db_connection()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    project = conn.execute('SELECT * FROM projects WHERE id = ?', (project_id,)).fetchone()
    if not project:
        flash("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return redirect(url_for('index'))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: LDAP –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π
    if invited_username:
        invited_user = conn.execute(
            'SELECT id, is_ldap_user FROM users WHERE username = ?', (invited_username,)
        ).fetchone()
    elif invited_user_id:
        invited_user = conn.execute(
            'SELECT id, is_ldap_user FROM users WHERE id = ?', (invited_user_id,)
        ).fetchone()
    else:
        flash("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        conn.close()
        return redirect(url_for('index'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not invited_user:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return redirect(url_for('index'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    existing_user = conn.execute(
        'SELECT * FROM project_users WHERE project_id = ? AND user_id = ?',
        (project_id, invited_user['id'])
    ).fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç
    if not existing_user:
        conn.execute(
            'INSERT INTO project_users (project_id, user_id, role) VALUES (?, ?, ?)',
            (project_id, invited_user['id'], 'member')
        )
        conn.commit()
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.")
    else:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ.")

    conn.close()
    return redirect(url_for('index'))
#–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
@app.route('/create_project', methods=['POST'])
def create_project():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    project_name = request.form['project_name']
    user_id = session['user_id']  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç

    conn = get_db_connection()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    conn.execute('INSERT INTO projects (name, owner_id) VALUES (?, ?)', (project_name, user_id))
    project_id = conn.execute('SELECT last_insert_rowid()').fetchone()[0]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (LDAP –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ) –≤ –ø—Ä–æ–µ–∫—Ç —Å —Ä–æ–ª—å—é "owner"
    conn.execute('INSERT INTO project_users (project_id, user_id, role) VALUES (?, ?, ?)', (project_id, user_id, 'owner'))

    conn.commit()
    conn.close()

    return redirect(url_for('index'))

#–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
@app.route('/remove_user_from_project', methods=['POST'])
def remove_user_from_project():
    if 'username' not in session:
        return jsonify({'error': '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'}), 403

    data = request.get_json()
    project_id = data.get('project_id')
    username = data.get('username')

    conn = get_db_connection()

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    user_to_remove = conn.execute('SELECT id FROM users WHERE username = ?', (username,)).fetchone()
    if not user_to_remove:
        conn.close()
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    project = conn.execute('SELECT owner_id FROM projects WHERE id = ?', (project_id,)).fetchone()
    if not project:
        conn.close()
        return jsonify({'error': '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    current_user_id = session['user_id']
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞
    if project['owner_id'] != current_user_id:
        conn.close()
        return jsonify({'error': '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}), 403

    # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if user_to_remove['id'] == project['owner_id']:
        conn.close()
        return jsonify({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞'}), 400

    # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    conn.execute('DELETE FROM project_users WHERE project_id = ? AND user_id = ?', (project_id, user_to_remove['id']))
    conn.commit()
    conn.close()

    return jsonify({'success': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞'})
#–ö–∞–ª–µ–Ω–¥–∞—Ä—å
@app.route('/calendar')
def calendar_view():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db_connection()
    user_id = session['user_id']

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
    tasks = conn.execute('''
        SELECT tasks.* FROM tasks
        JOIN projects ON tasks.project_id = projects.id
        LEFT JOIN project_users ON projects.id = project_users.project_id
        WHERE (projects.owner_id = ? OR project_users.user_id = ?)
        AND tasks.due_date IS NOT NULL
    ''', (user_id, user_id)).fetchall()
    conn.close()

    return render_template('calendar.html', tasks=tasks)

#–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@app.route('/task/<int:task_id>')
def view_task(task_id):
    conn = get_db_connection()
    task = conn.execute('SELECT * FROM tasks WHERE id = ?', (task_id,)).fetchone()
    conn.close()

    if task is None:
        return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    return render_template('view_task.html', task=task)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@app.route('/add_task', methods=['POST'])
def add_task():
    title = request.form['title']
    project_id = request.form['project_id']
    due_date = request.form.get('due_date')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É–∫–∞–∑–∞–Ω
    parent_id = request.form.get('parent_id')  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞)
    assignee_id = request.form.get('assignee_id')  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = session.get('user_id') if not session.get('is_ldap_user') else None

    conn = get_db_connection()

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    max_task_number = conn.execute('SELECT COALESCE(MAX(task_number), 0) + 1 FROM tasks').fetchone()[0]

    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º task_number –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
    if due_date:
        conn.execute(
            '''INSERT INTO tasks (task_number, title, project_id, status, user_id, due_date, parent_id, assignee_id)
               VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
            (max_task_number, title, project_id, 'To Do', user_id, due_date, parent_id, assignee_id))
    else:
        conn.execute(
            '''INSERT INTO tasks (task_number, title, project_id, status, user_id, parent_id, assignee_id)
               VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (max_task_number, title, project_id, 'To Do', user_id, parent_id, assignee_id))

    conn.commit()
    conn.close()
    return redirect(url_for('index'))

@app.route('/update_task_title/<int:task_id>', methods=['POST'])
def update_task_title(task_id):
    data = request.get_json()
    new_title = data.get('title')
    conn = get_db_connection()
    conn.execute('UPDATE tasks SET title = ? WHERE id = ?', (new_title, task_id))
    conn.commit()
    conn.close()
    return jsonify(success=True)

@app.route('/update_task_status/<int:task_id>', methods=['POST'])
def update_task_status(task_id):
    data = request.get_json()
    status = data.get('status')
    project_id = data.get('project_id')
    conn = get_db_connection()
    conn.execute('UPDATE tasks SET status = ?, project_id = ? WHERE id = ?', (status, project_id, task_id))
    conn.commit()
    conn.close()
    return jsonify(success=True)

@app.route('/update_task_description/<int:task_id>', methods=['POST'])
def update_task_description(task_id):
    data = request.get_json()
    description = data.get('description')
    conn = get_db_connection()
    conn.execute('UPDATE tasks SET description = ? WHERE id = ?', (description, task_id))
    conn.commit()
    conn.close()
    return jsonify(success=True)

@app.route('/delete_task', methods=['POST'])
def delete_task():
    data = request.get_json()
    task_id = data.get('task_id')
    conn = get_db_connection()
    conn.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()
    return jsonify(success=True)

@app.route('/delete_project', methods=['POST'])
def delete_project():
    data = request.get_json()
    project_id = data.get('project_id')
    conn = get_db_connection()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    user_id = session['user_id']
    project = conn.execute('SELECT owner_id FROM projects WHERE id = ?', (project_id,)).fetchone()

    if project['owner_id'] == user_id or session.get('is_admin'):
        conn.execute('DELETE FROM tasks WHERE project_id = ?', (project_id,))
        conn.execute('DELETE FROM projects WHERE id = ?', (project_id,))
        conn.commit()
        conn.close()
        return jsonify(success=True)
    else:
        conn.close()
        return jsonify(error="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"), 403

if __name__ == '__main__':
    init_db()
    app.run(debug=True)